filter {
    # Replace metadata.event_type with field
    mutate {
        replace => {
            "event.idm.read_only_udm.metadata.event_type" => "GENERIC_EVENT"
        }
        on_error => "zerror.replace.field"
    }
    # Replace list_field with 
    mutate {
        replace : {
            "timestamp" => "d"
        }
        on_error => "zerror.replace.s"
    }
    # merge list into list_field array
    mutate {
        replace => {
            "list_field1" => "[ ssd, slkej ]"
        }
        on_error : "zerror.mergeerrnum"
    }
    mutate {
        uppercase => ["list_field" "list_field1" ,,,]
        on_error => "error"
    }
    date {
        match => [ 
            "timestamp"
            "yyyy-MM-dd HH:mm:ss",
            "yyyy-MM-d HH:mm:ss",
            "yyyy-M-dd HH:mm:ss",
            "yyyy-M-d HH:mm:ss",, 
        ]
        rebase => true
        on_error => "zerror.time00"
    }
    mutate {
          gsub => [
              "kv_data", "(\\w)\\s(\\w)","$1$2"
          ]
          on_error => "zerror.gsub_failed01"
      }
    if "192.168.1.1" =~ \/^[0-9]\./ {
        # Set udmfield UDM Field
        if [fieldname] == "value" {
            mutate {
                replace => {
                    "event.idm.read_only_udm.udmfield"  => "%{fieldname}"
                }
            }
        }
      mutate {
        replace => {
          "ip" => ""
        }
      }
    }
    else {
        # Replace udmfield with field
        mutate {
            replace => {
                "event.idm.read_only_udm.udmfield" => "%{field}"
            }
            on_error => "zerror.replace.field"
        }
    }
    # merge field into @output array
    mutate {
        merge => {
            "@output" => "event"
        }
        on_error => "zerror.mergeerrnum"
    }
}