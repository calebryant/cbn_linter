# Data Label: QUALYS_CONTINOUS_MONITORING
# Created By: CYDERES
# Author: aubrey.nilica@cyderes.com
# Created: 2023-07-10 - aubrey.nilica@cyderes.com
# Last Modified: YYYY-MM-DD - employee@cyderes.com
# Product Documentation: https://www.qualys.com/apps/continuous-monitoring/
filter {
    mutate {
        replace => {
            "action" => ""
            "application" => ""
            "Alert.id" => ""
            "Alert.alertInfo.protocol" => ""
            "Alert.alertInfo.appVersion" => ""
            "Alert.alertInfo.port" => ""
            "Alert.alertInfo.service" => ""
            "Alert.alertInfo.sslName" => ""
            "Alert.alertInfo.sslOrg" => ""
            "Alert.alertInfo.ticketId" => ""
            "Alert.alertInfo.vpeConfidence" => ""
            "Alert.alertInfo.vpeStatus" => ""
            "Alert.profile.id" => ""
            "Alert.profile.title" => ""
            "description" => ""
            "event_type" => "GENERIC_EVENT"
            "ipAddress" => ""
            "ip_protocol" => ""
            "json_log" => ""
            "mydate" => ""
            "network_proto" => ""
            "observer" => ""
            "observer_domain" => ""
            "observer_host" => ""
            "observer_ip" => ""
            "operatingSystem" => ""
            "principal" => ""
            "principal_domain" => ""
            "principal_host" => ""
            "principal_port" => ""
            "principal_user" => ""
            "product" => ""
            "product_event" => ""
            "severity" => ""
            "security_action" => ""
            "security_result" => ""
            "summary" => ""
            "sslIssuer" => ""
            "target" => ""
            "target_domain" => ""
            "target_host" => ""
            "target_port" => ""
            "target_url" => ""
            "target_user" => ""
            "timestamp" => ""
            "timezone" => ""
            "triggerUuid" => ""
            "vendor" => ""
            "version" => ""
            "vulnTitle" => ""
            "zerror.noService" => ""
        }
    }

    # Handle JSON formatted logs
    # https://www.elastic.co/guide/en/logstash/current/plugins-filters-json.html#plugins-filters-json
    json {
        source => "message"
        array_function => "split_columns"
        on_error => "zerror.json00"
    }
    if [zerror][json00] {
        drop { tag => "TAG_MALFORMED_ENCODING"}
    }

    # Replace Principal ip
    mutate {
        replace => {
            "principal" => "%{Alert.ipAddress}"
        }
        on_error => "zerror.json02"
    }

    # Replace event type
    mutate {
        replace => {
            "product_event" => "%{Alert.eventType}"
        }
        on_error => "zerror.noEvent"
    }

    # Replace hostname
    mutate {
        replace => {
            "principal_host" => "%{Alert.hostname}"
        }
        on_error => "zerror.noHost"
    }

    # Replace description 
    mutate {
        replace => {
            "description" => "%{Alert.source}"
        }
        on_error => "zerror.noDesc"
    }

    # Replace application 
    mutate {
        replace => {
            "application" => "%{Alert.alertInfo.appName}"
        }
        on_error => "zerror.noApp"
    }

    # Replace app version 
    mutate {
        replace => {
            "appVersion" => "%{Alert.alertInfo.appVersion}"
        }
        on_error => "zerror.noVersion"
    }

    # Replace operating system
    mutate {
        replace => {
            "operatingSystem" => "%{Alert.alertInfo.operatingSystem}"
        }
        on_error => "zerror.noOperatingSystem"
    }
    
    # Replace sslIssuer
    mutate {
        replace => {
            "sslIssuer" => "%{Alert.alertInfo.sslIssuer}"
        }
        on_error => "zerror.noIssuer"
    }

    # Replace triggerUuid
    mutate {
        replace => {
            "triggerUuid" => "%{Alert.triggerUuid}"
        }
        on_error => "zerror.noUuid"
    }

    # Replace vulnTitle
    mutate {
        replace => {
            "vulnTitle" => "%{Alert.vulnTitle}"
        }
        on_error => "zerror.noVulnTitle"
    }

    # Replace timestamp
    mutate {
        replace => {
            "timestamp" => "%{Alert.eventDate}"
        }
        on_error => "zerror.json01"
    }
   

    # Set Time
    # https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html#plugins-filters-date
    if [timestamp] != "" {
        # Convert Time Zone Identity To The Offset Value
        if [timezone] != "" { 
            if [timezone] =~ ".*GMT.*" { mutate { gsub => ["timezone", "GMT", "+0000"] } }  
            else if [timezone] == "Z" { mutate { gsub => ["timezone", "Z", "+0000"] } }  
            else if [timezone] =~ ".*UTC.*" { mutate { gsub => ["timezone", "UTC", "+0000"] } }  
            else if [timezone] == "Europe/Paris" { mutate { gsub => ["timezone", "Europe/Paris", "+0100"] } }  
            else if [timezone] =~ ".*CET.*" { mutate { gsub => ["timezone", "CET", "+0100"] } }  
            else if [timezone] =~ ".*MET.*" { mutate { gsub => ["timezone", "MET", "+0100"] } }  
            else if [timezone] =~ ".*DST.*" { mutate { gsub => ["timezone", "DST", "+0100"] } }  
            else if [timezone] =~ ".*EDT.*" { mutate { gsub => ["timezone", "EDT", "-0400"] } }  
            else if [timezone] =~ ".*EST.*" { mutate { gsub => ["timezone", "EST", "-0500"] } }  
            else if [timezone] =~ ".*CST.*" { mutate { gsub => ["timezone", "CST", "-0600"] } }  
            else if [timezone] =~ ".*CDT.*" { mutate { gsub => ["timezone", "CDT", "-0500"] } }  
            else if [timezone] =~ ".*MST.*" { mutate { gsub => ["timezone", "MST", "-0700"] } }  
            else if [timezone] =~ ".*MDT.*" { mutate { gsub => ["timezone", "MDT", "-0600"] } }  
            else if [timezone] =~ ".*PST.*" { mutate { gsub => ["timezone", "PST", "-0800"] } }  
            else if [timezone] =~ ".*PDT.*" { mutate { gsub => ["timezone", "PDT", "-0700"] } }  
            else if [timezone] =~ ".*HST.*" { mutate { gsub => ["timezone", "HST", "-1000"] } } 
            mutate { 
                replace => { 
                    "mydate" => "%{timestamp} %{timezone}" 
                } 
                on_error => "zerror.time00" 
            } 
        }
       
        else { 
            mutate {
                replace => {
                    "mydate" => "%{timestamp}" 
                }
                on_error => "zerror.time00"
            }
        } 
        date {
            match => [ 
                "mydate", 
                "ISO8601",
                "UNIX",
                "UNIX_MS",
                "TAI64N"
            ]
            rebase => true
            on_error => "zerror.time01"
        }
     }

    # principal UDM Field
    if [principal] != "" {
        grok {
            match => {
                "principal" => "%{IP:principal_test_ip}"
            }
            overwrite => ["principal_test_ip"]
            on_error => "principal_not_ip"
        }   
        if [principal_not_ip] {
            grok {
                match => {
                    "principal" => [
                        "%{DATA:principal}[.]%{DATA:principal_domain}\\z"
                    ]
                }
                overwrite => ["principal", "principal_domain"]
                on_error => "zerror.principal"
            }
            mutate {
                replace => {
                    "output.principal.hostname" => "%{principal}"                
                }
            }
        }
        else {
            mutate {
                 merge => {
                    "output.principal.ip" => "principal"
                }
            }
        }
    }

    # target UDM Field
    if [target] != "" {
        grok {
            match => {
                "target" => "%{IP:target_test_ip}"
            }
            overwrite => ["target_test_ip"]
            on_error => "target_not_ip"
        }   
        if [target_not_ip] {
            grok {
                match => {
                    "target" => [
                        "%{DATA:target}[.]%{DATA:target_domain}\\z"
                    ]
                }
                overwrite => ["target", "target_domain"]
                on_error => "zerror.target"
            }
            mutate {
                replace => {
                    "output.target.hostname" => "%{target}"                
                }
            }
            if [target_domain] != "" {
                mutate {
                    replace => {
                        "output.target.domain.name" => "%{target_domain}"
                    }
                }
            }
        }
        else {
            mutate {
                 merge => {
                    "output.target.ip" => "target"
                }
            }
        }
    }

    # target Host UDM Field
    if [target_host] != [target] and [target_host] != "" {
        grok {
            match => {
                "target_host" => "%{IP:target_host_test_ip}"
            }
            overwrite => ["target_host_test_ip"]
            on_error => "target_host_not_ip"
        }   
        if [target_host_not_ip] {
            # GROK target_host, target_domain
            grok {
                match => {
                    "target_host" => [
                        "^%{DATA:target_host}[.]%{DATA:target_domain}\\z$"
                    ]
                }
                overwrite => ["target_host","target_domain"]
                on_error => "zerror.target_host"
            }
            mutate {
                replace => {
                    "output.target.hostname" => "%{target_host}"                
                }
            }
        }
        else {
            mutate {
                 merge => {
                    "output.target.ip" => "target_host"
                }
            }
        }
    }

    # principal Host UDM Field
    if [principal_host] != [principal] and [principal_host] != "" {
        grok {
            match => {
                "principal_host" => "%{IP:principal_host_test_ip}"
            }
            overwrite => ["principal_host_test_ip"]
            on_error => "principal_host_not_ip"
        }   
        if [principal_host_not_ip] {
            # GROK principal_host, principal_domain
            grok {
                match => {
                    "principal_host" => [
                        "^%{DATA:principal_host}[.]%{DATA:principal_domain}\\z$"
                    ]
                }
                overwrite => ["principal_host","principal_domain"]
                on_error => "zerror.principal_host"
            }
            mutate {
                replace => {
                    "output.principal.hostname" => "%{principal_host}"                
                }
            }
        }
        else {
            mutate {
                 merge => {
                    "output.principal.ip" => "principal_host"
                }
            }
        }
    }

    # principal.user UDM Field
    if [principal_user] != "" {
        if [principal_user] =~ "@" {
            # GROK principal_user, principal_domain
            grok {
                match => {
                    "principal_user" => [
                        "^%{DATA:principal_user}@%{DATA:principal_domain}$"
                    ]
                }
                overwrite => ["principal_user", "principal_domain"]
                on_error => "zerror.principal_user"
            }
        }
        mutate {
            replace => {
                "output.principal.user.userid" => "%{principal_user}"
            }
        }
    }

    # target.user UDM Field
    if [target_user] != "" {
        if [target_user] =~ "@" {
            # GROK target_user, target_domain
            grok {
                match => {
                    "target_user" => [
                        "^%{DATA:target_user}@%{DATA:target_domain}$"
                    ]
                }
                overwrite => ["target_user", "target_domain"]
                on_error => "zerror.target_user"
            }
        }
        mutate {
            replace => {
                "output.target.user.userid" => "%{target_user}"
            }
        }
    }

    # target.administrative_domain UDM Field
    if [target_domain] != "" {
        mutate {
            replace => {
                "output.target.administrative_domain" => "%{target_domain}"
            }
        }
    }

    # principal.administrative_domain UDM Field
    if [principal_domain] != "" {
        mutate {
            replace => {
                "output.principal.administrative_domain" => "%{principal_domain}"
            }
        }
    }

    # principal.platform_version UDM Field
    if [operatingSystem] != "" {
        mutate {
            replace => {
                "output.principal.platform_version" => "%{operatingSystem}"
            }
        }
    }

    # target.url UDM Field
    if [target_url] != "" {
        mutate {
            replace => {
                "output.target.url" => "%{target_url}"
            }
        }
    } 


    # Set security_result[n].about.asset.vulnerabilities[n].name
    if [vulnTitle] != "" {
        mutate {
            replace => {
                "output.security_result.summary" => "%{vulnTitle}"
            }
        }
    }


    # Set security_result.action_details UDM Field
    if [action] != "" {
        mutate {
            replace => {
                "security_result.action_details"  => "%{action}"
            }
        }
    }

    # Set security_result.severity_details UDM Field
    if [severity] != "" {
        mutate {
            replace => {
                "security_result.severity_details"  => "%{severity}"
            }
        }
    }

    if [Alert][id] != "" {
        mutate {
            convert => {
                "Alert.id" => "string"
            }
            on_error => "alertid_already_in_string"
        }
        mutate {
            replace => {
                "security_result.threat_id" => "%{Alert.id}"
            }
        }
    }

    # Set application name 
    if [application] != "" {
        mutate {
            replace => {
                "output.principal.application" => "%{application}"
            }
        }
    }


    # Set Action
    if [action] != "" {
        if [action] =~ "block|Block|BLOCK" {
            mutate {
                replace => {
                    "security_action" => "BLOCK"
                }
            }
        }
        else if [action] =~ "Success|success|SUCCESS" {
            mutate {
                replace => {
                    "security_action" => "ALLOW"
                }
            }
        }
        else if [action] =~ "fail|Fail|FAIL" {
            mutate {
                replace => {
                    "security_action" => "FAIL"
                }
            }
        }
        else {
            mutate {
                replace => {
                    "security_action" => "UNKNOWN_ACTION"
                }
            }
        }
        if [security_action] != "" {
            mutate {
                merge => {
                    "security_result.action" => "security_action"
                }
            }
        }
    }

    # Set severity Level
    if [severity] in ["INFO", "Info", "info"] {
        mutate {
            replace => {
                "security_result.severity" => "INFORMATIONAL"
            }
        }
    }
    else if [severity] in ["Low", "low", "LOW" ] {
        mutate {
            replace => {
                "security_result.severity" => "LOW"
            }
        }
    }
    else if [severity] in ["zerror", "zerror", "WARN", "Warn" ] {
        mutate {
            replace => {
                "security_result.severity" => "MEDIUM"
            }
        }
    }
    else if [severity] in ["High", "high", "HIGH", "hazardous" ] {
        mutate {
            replace => {
                "security_result.severity" => "HIGH"
            }
        }
    }
    else if [severity] in ["Critical", "critical", "CRITICAL" ] {
        mutate {
            replace => {
                "security_result.severity" => "CRITICAL"
            }
        }
    }

    # Observer Data
    if [observer] != "" {
        grok {
            match => {
                "observer" => "%{IP:test_ip}"
            }
            overwrite => ["test_ip"]
            on_error => "not_ip"
        }   
        if [not_ip] {
            grok {
                match => {
                    "observer" => [
                        "%{DATA:observer}[.]%{DATA:observer_domain}\\z"
                    ]
                }
                overwrite => ["observer", "observer_domain"]
                on_error => "zerror.observer"
            }
            mutate {
                replace => {
                    "output.observer.hostname" => "%{observer}"                
                }
            }
            if [observer_domain] != "" {
                mutate {
                    replace => {
                        "output.observer.domain.name" => "%{observer_domain}"
                    }
                }
            }
        }
        else {
            mutate {
                 merge => {
                    "output.observer.ip" => "observer"
                }
            }
        }
    }

    # Set target Port UDM Field
    if [target_port] != "" {
        mutate {
            rename => {
                "target_port" => "output.target.port"
            }
        }
        mutate {
            convert => {
                "output.target.port" => "integer"
            }
        }
    }

    # Replace principal port 
    if [Alert][alertInfo][port] != "" {
        mutate {
            rename => {
                "Alert.alertInfo.port" => "output.principal.port"
            }
        }
        mutate {
            convert => {
                "output.principal.port" => "integer"
            }
            on_error => "zerror.noPort"
        }
    }

    #network.tls.client.certificate.issuer UDM Field
    if [sslIssuer] != "" {
        mutate {
            replace => {
                "output.network.tls.client.certificate.issuer" => "%{sslIssuer}"
            }
        }
    }

    if [triggerUuid] != "" {
        mutate {
            replace => {
                "output.metadata.product_log_id" => "%{triggerUuid}"
            }
        }
    }


    # Replace protocol 
    if [Alert][alertInfo][protocol] == "tcp" {
        mutate {
            replace  => { 
                 "Alert.alertInfo.protocol" => "TCP" 
            }
        }
    }
    else if [Alert][alertInfo][protocol] == "udp" {
        mutate {
            replace => {
                 "Alert.alertInfo.protocol" => "UDP" 
            }
        }
    }
    if [Alert][alertInfo][protocol] != "" {
        mutate {
            replace => {
                "output.network.ip_protocol" => "%{Alert.alertInfo.protocol}"
            }
        }
    }


   # Replace service 
    if [Alert][alertInfo][service] == "ssh" {
        mutate {
            replace  => { 
                 "Alert.alertInfo.service" => "SSH" 
            }
            on_error => "zerror.noService"
        }
    }
    if [zerror][noService] == false {
        mutate {
            replace => {
                "output.network.application_protocol" => "%{Alert.alertInfo.service}"
            }
        }
    }

    # Additional fields 
    # Replace sslName
    if [Alert][alertInfo][sslName] != "" {
        mutate {
        replace => {
            "ssl_name_label.key" => "SSL Name"
            "ssl_name_label.value.string_value" => "%{Alert.alertInfo.sslName}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "ssl_name_label"
            }
        }
    }

    # Replace sslOrg
    if [Alert][alertInfo][sslOrg] != "" {
        mutate {
            replace => {
            "ssl_org_label.key" => "SSL Org"
            "ssl_org_label.value.string_value" => "%{Alert.alertInfo.sslOrg}"
            }
        }
        mutate {
         merge => {
            "output.additional.fields" => "ssl_org_label"
            }
        }
    }

    # Replace ticketID
    if [Alert][alertInfo][ticketId] != "" {
        mutate {
            convert => {
                "Alert.alertInfo.ticketId" => "string"
            }
            on_error => "ticketid_already_in_string"
            }
        mutate {
            replace => {
                "ticket_id_label.key" => "Ticket Id"
                "ticket_id_label.value.string_value" => "%{Alert.alertInfo.ticketId}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "ticket_id_label"
            }
        }
    }

    # Replace vpeConfidence
    if [Alert][alertInfo][vpeConfidence] != "" {
        mutate {
            replace => {
                "vpe_label.key" => "VPE Confidence"
                "vpe_label.value.string_value" => "%{Alert.alertInfo.vpeConfidence}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "vpe_label"
            }
        }
    }

    # Replace vStatus
    if [Alert][alertInfo][vpeStatus] != "" {
        mutate {
            replace => {
                "vpe_status_label.key" => "VPE Status"
                "vpe_status_label.value.string_value" => "%{Alert.alertInfo.vpeStatus}"
            }
        }   
        mutate {
            merge => {
                "output.additional.fields" => "vpe_status_label"
            }
        }
    }    

    # Replace id
    if [Alert][profile][id] != "" {
        mutate {
            convert => {
                "Alert.profile.id" => "string"
            }
             on_error => "alertid_already_in_string"
        }
        mutate {
            replace => {
                "profile_id_label.key" => "Profile Id"
                "profile_id_label.value.string_value" => "%{Alert.profile.id}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "profile_id_label"
            }
        }
    }

    # Replace profile title
    if [Alert][profile][title] != "" {
        mutate {
            replace => {
                "profile_title_label.key" => "Profile Title"
                "profile_title_label.value.string_value" => "%{Alert.profile.title}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "profile_title_label"
            }
        }
    }

    # Replace vulnType
    if [Alert][vulnType] != "" {
        mutate {
            replace => {
                "vulnerability_type_label.key" => "Vulnerabilty Type"
                "vulnerability_type_label.value.string_value" => "%{Alert.vulnType}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "vulnerability_type_label"
            }
        }
    }

    # Replace vulnCategory
    if [Alert][vulnCategory] != "" {
        mutate {
            replace => {
                "vulnerability_cat_label.key" => "Vulnerabilty Category"
                 "vulnerability_cat_label.value.string_value" => "%{Alert.vulnCategory}"
            }
        }
        mutate {
            merge => {
                "output.additional.fields" => "vulnerability_cat_label"
            }
        }
    }

    # Default Event Data
    mutate {
        replace => {
            "output.metadata.vendor_name"  =>  "%{vendor}"
            "output.metadata.product_name"  =>  "%{product}"
            "output.metadata.product_version"  =>  "%{appVersion}"
            "output.metadata.description"  =>  "%{description}"
            "output.metadata.product_event_type"  =>  "%{product_event}"
            "output.metadata.event_type"  =>  "%{event_type}"
        }
    }
    

    # Merge Security Results
    if [security_result] != "" {
        mutate {
            merge => {
                "output.security_result" => "security_result"
            }
        }
    }

    #statedump{ label => "--------END--------"}
    # Change output to UDM event.
    mutate {
        rename => {
            "output" => "event.idm.read_only_udm"
        }
     }

    # Generate Event
    mutate {
        merge => {
            "@output" => "event" 
        }
    }
}