filter {
    mutate {
        replace => {
            "MatchDetails" => "dmFsdWUxfHZhbHVlMnx2YWx1ZTN8dmFsdWU0fHZhbHVlNXx2YWx1ZTY="
            "words" => "%{column11}"
            "destination" => "%{string}"
        }
        on_error => "zerror.replace_string"
    }
    grok {
        match => {
            "message" => [ "^CEF:%{INT}[|]%{DATA:vendor_name}[|]%{DATA:product_event}[|]%{DATA:product_version}[|]%{DATA:summary}[|]%{DATA:description}[|]%{DATA:severity}[|]%{GREEDYDATA:cef_data} rawEvent=%{GREEDYDATA:raw_event} (?P<valuename>here is my pattern)$"  
                "^CEF:%{INT}[|]%{DATA:vendor_name}[|]%{DATA:product_event}[|]%{DATA:product_version}[|]%{DATA:summary}[|]%{DATA:description}[|]%{DATA:severity}[|]%{GREEDYDATA:cef_data} rawEvent=%{GREEDYDATA:raw_event} (?P<valuename>here is my pattern)$"  
                "^CEF:%{INT}[|]%{DATA:vendor_name}[|]%{DATA:product_event}[|]%{DATA:product_version}[|]%{DATA:summary}[|]%{DATA:description}[|]%{DATA:severity}[|]%{GREEDYDATA:cef_data} rawEvent=%{GREEDYDATA:raw_event} (?P<valuename>here is my pattern)$"  
            ],
        }
        overwrite => [ "product_version" ]
        on_error => "zerror.grok_source"
    }

    statedump {}
    mutate {
    replace => {
      "event.idm.read_only_udm.metadata.event_type" => "GENERIC_EVENT"
    }
    on_error => "no_country_found"
  }
  # merge event into @output array
  mutate {
      merge => {
          "@output" => "event"
      }
      on_error => "zerror.mergeerrnum"
  }
}
